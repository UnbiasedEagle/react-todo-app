{"version":3,"sources":["todos.js","TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","todoList","length","map","todo","key","id","className","content","onClick","class","TodoForm","state","addTodo","e","preventDefault","props","setState","handleChange","target","value","onSubmit","this","onChange","type","htmlFor","React","Component","App","updateTodoList","filter","newTodo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAqBeA,EAnBD,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAChBC,EAAWF,EAAMG,OACrBH,EAAMI,KAAI,SAACC,GACT,OACE,yBAAKC,IAAKD,EAAKE,GAAIC,UAAU,mBAC3B,8BAAOH,EAAKI,SACZ,uBACEC,QAAS,kBAAMT,EAAWI,EAAKE,KAC/BI,MAAM,+BAMd,wBAAIH,UAAU,sBAAd,2BAEF,OAAO,yBAAKA,UAAU,oBAAoBN,ICuB7BU,E,4MAtCbC,MAAQ,CACNJ,QAAS,I,EAEXK,QAAU,SAACC,GACTA,EAAEC,iBACF,EAAKC,MAAMH,QAAQ,EAAKD,MAAMJ,SAC9B,EAAKS,SAAS,CACZT,QAAS,M,EAGbU,aAAe,SAACJ,GACd,EAAKG,SAAS,CACZT,QAASM,EAAEK,OAAOC,S,uDAIpB,OACE,6BACE,0BAAMC,SAAUC,KAAKT,SACnB,yBAAKN,UAAU,eACb,2BACEgB,SAAUD,KAAKJ,aACfM,KAAK,OACLjB,UAAU,WACVD,GAAG,OACHc,MAAOE,KAAKV,MAAMJ,UAEpB,2BAAOiB,QAAQ,QAAf,aAEF,4BAAQlB,UAAU,qCAAqCiB,KAAK,UAA5D,kB,GA9BaE,IAAMC,WCoCdC,G,kNAhCbhB,MAAQ,CACNb,MAAO,I,EAETC,WAAa,SAACM,GACZ,IAAMuB,EAAiB,EAAKjB,MAAMb,MAAM+B,QAAO,SAAC1B,GAC9C,OAAOA,EAAKE,KAAOA,KAErB,EAAKW,SAAS,CACZlB,MAAO8B,K,EAGXhB,QAAU,SAACT,GACT,IAAM2B,EAAU,CACdzB,GAAI,EAAKM,MAAMb,MAAMG,OAAS,EAC9BM,QAASJ,GAELH,EAAQ,sBAAO,EAAKW,MAAMb,OAAlB,CAAyBgC,IACvC,EAAKd,SAAS,CACZlB,MAAOE,K,uDAIT,OACE,yBAAKM,UAAU,uBACb,wBAAIA,UAAU,2BAAd,SACA,kBAAC,EAAD,CAAOP,WAAYsB,KAAKtB,WAAYD,MAAOuB,KAAKV,MAAMb,QACtD,kBAAC,EAAD,CAAUc,QAASS,KAAKT,e,GA3Bda,IAAMC,YCOJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c1aa2a1f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Todos = ({ todos, deleteTodo }) => {\r\n  const todoList = todos.length ? (\r\n    todos.map((todo) => {\r\n      return (\r\n        <div key={todo.id} className='collection-item'>\r\n          <span>{todo.content}</span>\r\n          <i\r\n            onClick={() => deleteTodo(todo.id)}\r\n            class='fas fa-trash-alt fa-2x'\r\n          ></i>\r\n        </div>\r\n      );\r\n    })\r\n  ) : (\r\n    <h4 className='center-align white'>You have no todo's left</h4>\r\n  );\r\n  return <div className='todos collection'>{todoList}</div>;\r\n};\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\n\r\nclass TodoForm extends React.Component {\r\n  state = {\r\n    content: '',\r\n  };\r\n  addTodo = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.content);\r\n    this.setState({\r\n      content: '',\r\n    });\r\n  };\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      content: e.target.value,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.addTodo}>\r\n          <div className='input-field'>\r\n            <input\r\n              onChange={this.handleChange}\r\n              type='text'\r\n              className='validate'\r\n              id='todo'\r\n              value={this.state.content}\r\n            ></input>\r\n            <label htmlFor='todo'>Add Todo</label>\r\n          </div>\r\n          <button className='btn waves-effect waves-light black' type='submit'>\r\n            Add Todo\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoForm;\r\n","import React from 'react';\nimport Todos from './todos';\nimport TodoForm from './TodoForm';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n  };\n  deleteTodo = (id) => {\n    const updateTodoList = this.state.todos.filter((todo) => {\n      return todo.id !== id;\n    });\n    this.setState({\n      todos: updateTodoList,\n    });\n  };\n  addTodo = (todo) => {\n    const newTodo = {\n      id: this.state.todos.length + 1,\n      content: todo,\n    };\n    const todoList = [...this.state.todos, newTodo];\n    this.setState({\n      todos: todoList,\n    });\n  };\n  render() {\n    return (\n      <div className='todos-app container'>\n        <h1 className='center-align white-text'>Todos</h1>\n        <Todos deleteTodo={this.deleteTodo} todos={this.state.todos}></Todos>\n        <TodoForm addTodo={this.addTodo}></TodoForm>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}